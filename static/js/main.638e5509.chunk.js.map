{"version":3,"sources":["components/Player.js","components/Titlebar.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","react_default","a","createElement","className","title","src","url","replace","height","width","frameBorder","scrolling","Titlebar","id","Spinner","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","res","json","data","setState","episodes","items","document","getElementById","style","display","catch","err","console","log","state","length","map","episode","key","guid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAEe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQE,MAAOL,EAAMK,MAAOC,IAAKN,EAAMO,IAAIC,QAAQ,WAAY,kBAAmBC,OAAO,QAAQC,MAAM,QAAQC,YAAY,IAAIC,UAAU,QCHhI,SAASC,IACtB,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,GAAG,YACNb,EAAAC,EAAAC,cAAA,+BCHS,SAASY,IACtB,OACEd,EAAAC,EAAAC,cAAA,OAAKW,GAAG,WACNb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,wBCqC9Ba,cAnCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAKFI,kBAAoB,WAGlBC,MADa,+HAEVC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJZ,EAAKa,SAAS,CAAEC,SAAYF,EAAKG,OAAS,kBAAMC,SAASC,eAAe,WAAWC,MAAMC,QAAU,WAEpGC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAZ5BrB,EAAKwB,MAAQ,CACXV,SAAU,IAHAd,wEAiBZ,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,OAAKW,GAAG,UAENM,KAAKqB,MAAMV,SAASW,OAAS,EAC7BtB,KAAKqB,MAAMV,SAASY,IAAI,SAAAC,GAAO,OAC7B3C,EAAAC,EAAAC,cAACJ,EAAD,CAAQ8C,IAAKD,EAAQE,KAAMzC,MAAOuC,EAAQvC,MAAOE,IAAKqC,EAAQrC,QAE9D,YA5BMwC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAAStB,SAASC,eAAe,WD2H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.638e5509.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Player(props) {\r\n  return (\r\n    <div className=\"player\">\r\n      <iframe title={props.title} src={props.url.replace('/webdev/', '/webdev/embed/')} height=\"102px\" width=\"400px\" frameBorder=\"0\" scrolling=\"no\"></iframe>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Titlebar() {\r\n  return (\r\n    <div id=\"Titlebar\">\r\n      <h1>r/webdev podcast</h1>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div id=\"Spinner\">\r\n      <div className=\"lds-ripple\"><div></div><div></div></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\nimport Player from './components/Player';\nimport Titlebar from './components/Titlebar';\nimport Spinner from './components/Spinner';\nimport './Base.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      episodes: []\n    }\n  }\n  componentDidMount = () => {\n    // @Fallback feed URL => const feed = 'https://cors.io/?https://feed2json.org/convert?url=https%3A%2F%2Fanchor.fm%2Fs%2F912ca60%2Fpodcast%2Frss';\n    const feed = 'https://cors-anywhere.herokuapp.com/https://feed2json.org/convert?url=https%3A%2F%2Fanchor.fm%2Fs%2F912ca60%2Fpodcast%2Frss';\n    fetch(feed)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ 'episodes': data.items }, () => document.getElementById('Spinner').style.display = 'none');\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Spinner />\n        <Titlebar />\n        <div id=\"Output\">\n        {\n          this.state.episodes.length > 0 ? \n          this.state.episodes.map(episode => (\n            <Player key={episode.guid} title={episode.title} url={episode.url}/>\n          ))\n          : ''\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('webdev'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}